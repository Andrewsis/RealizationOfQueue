#include <iostream>
#include <string>

using namespace std;

class Queue
{
private:
    struct Node {
        int data;
        Node* next;

        Node(int value)
        {
            data = value;
            next = nullptr;
        }
    };

    Node* first;
    Node* last;

public:
    Queue()
    {
        first = nullptr;
        last = nullptr;
    }

    ~Queue() {
        while (first != nullptr) {
            Node* temp = first;
            first = first->next;
            temp = nullptr;
        }
    }

    void AddElement(int value)
    {
        Node* newNode = new Node(value);

        if (isEmpty())
        {
            first = newNode;
        }
        else
        {
            last->next = newNode;
        }

        last = newNode;
    }

    int RemoveElement()
    {
        if (isEmpty()) return -1;

        Node* temp = first;
        first = first->next;

        int value = temp->data;
        delete temp;

        if (first == nullptr) last = nullptr;

        return value;
    }

    int GetFirstElement()
    {
        if (isEmpty()) return -1;

        return first->data;
    }

    bool isEquals(Queue queue2) const
    {
        Node* node1 = first;
        Node* node2 = queue2.first;

        return isEquals(node1, node2);
    }

    void Print()
    {
        Print(first);

        cout << endl;
    }

    void Input()
    {
        string input;
        int value;
        cout << "Input your value: " << endl;
        
        while (true) 
        {
            getline(cin, input);

            if (input.empty()) return;

            value = stoi(input);

            AddElement(value);

            input.clear();
        }

    }

private:
    void Print(Node* first)
    {
        if (first == nullptr) return;

        cout << first->data << " ";


        first = first->next;

        Print(first);
    }

    bool isEmpty()
    {
        return first == nullptr;
    }

    bool isEquals(Node* node1, Node* node2) const
    {
        if (node1 == nullptr || node2 == nullptr) return false;
        if (node1->data != node2->data) return false;

        node1 = node1->next;
        node2 = node2->next;

        if ((node1 == nullptr && node2 != nullptr) ||
            (node2 == nullptr && node1 != nullptr)) return false;

        isEquals(node1, node2);

        return true;
    }
};

int main()
{
    Queue queue1;

    queue1.Input();

    Queue queue2;

    queue2.AddElement(30);
    queue2.AddElement(20);
    queue2.AddElement(10);

    cout << queue1.isEquals(queue2) << endl;
     
    return 0;
}
