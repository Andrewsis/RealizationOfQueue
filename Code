#include <iostream>

using namespace std;

class Queue
{
private:
    struct Node {
        int data;
        Node* next;

        Node(int value) 
        {
            data = value;
            next = nullptr;
        }
    };

    Node* first;
    Node* last;

public:
    Queue()
    {
        first = nullptr;
        last = nullptr;
    }

    ~Queue()
    {
        while (!isEmpty()) {
            Node* temp = first;
            first = first->next;
            delete temp;
        }
    }

    void AddElement(int value)
    {
        Node* newNode = new Node(value);

        if (isEmpty()) 
        {
            first = newNode;
        }
        else 
        {
            last->next = newNode;
        }

        last = newNode;
    }

    int RemoveElement()
    {
        if (isEmpty()) return -1;

        Node* temp = first;
        first = first->next;

        int value = temp->data;
        delete temp;

        if (first == nullptr) last = nullptr;

        return value;
    }

    int GetFirstElement()
    {
        if (isEmpty()) return -1;

        return first->data;
    }

    static bool Equals(const Queue& queue1, const Queue& queue2)
    {
        Node* node1 = queue1.first;
        Node* node2 = queue2.first;
    
        return Equals(node1, node2);
    }

private:
    bool isEmpty()
    {
        return first == nullptr;
    }

    static bool Equals(Node* node1, Node* node2)
    {
        while (node1 != nullptr && node2 != nullptr)
        {
            if (node1->data != node2->data) return false;

            Equals(node1->next, node2->next);

            node1 = node1->next;
            node2 = node2->next;
        }

        if ((node1 == nullptr && node2 != nullptr) ||
            (node2 == nullptr && node1 != nullptr)) return false;
        
        return true;
    }
};

int main()
{
    Queue queue1;

    queue1.AddElement(30);
    queue1.AddElement(20);
    queue1.AddElement(10);
    queue1.RemoveElement();

    Queue queue2;

    queue2.AddElement(30);
    queue2.AddElement(20);
    queue2.AddElement(10);
    queue2.RemoveElement();

    cout << Queue::Equals(queue1, queue2);

    return 0;
}
